
/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.*;

public class ImageApplication extends Frame {
	// Some Class Variables
	Image img; // represents Active image working on.
	Image backupImage; // represents Backup Image.

	// Class to display current image
	ImageFrame frame_image_display = new ImageFrame(); // YOU MUST CREATE

	// Class to hold image data to be able to
	// manipulate
	ImageData img_data; // YOU MUST CREATE********

	double contrastActive = 1;

	// Today

	public ImageApplication() {
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.

		// {{INIT_CONTROLS
		setLayout(null);
		setSize(405, 305);
		setVisible(false);
		openFileDialog1.setMode(FileDialog.LOAD);
		openFileDialog1.setTitle("Open");

		setLayout(null);
		setSize(405, 305);
		setVisible(false); // Today
		saveFileDialog1.setMode(FileDialog.SAVE);
		saveFileDialog1.setTitle("Save As");

		// $$ openFileDialog1.move(24,312);

		label_title.setText("Aaquib\' Image Toolkit");
		add(label_title);
		label_title.setFont(new Font("Dialog", Font.BOLD, 20));
		label_title.setBounds(84, 36, 245, 51);
		// $$ openFileDialog2.move(40,277);
		setTitle("AWT Application");
		// }}

		// {{INIT_MENUS
		menu1.setLabel("File");

		menu1.add(openMenuItem);
		openMenuItem.setLabel("Open...");
		openMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_O, false));
		menu1.add(saveMenuItem);
		saveMenuItem.setEnabled(true);
		saveMenuItem.setLabel("Save As");
		saveMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S, false));
		menu1.add(separatorMenuItem);
		separatorMenuItem.setLabel("-");
		menu1.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		mainMenuBar.add(menu1);

		// My Changes

		menu2.setLabel("Edit");

		menu2.add(undoMenuItem);
		undoMenuItem.setLabel("Undo"); // Edit Menu
		undoMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_Z, false));

		mainMenuBar.add(menu2);

		menu4.setLabel("Process");

		menu4.add(thresholdMenuItem);
		thresholdMenuItem.setLabel("Threshold");

		menu4.add(negativeMenuItem);
		negativeMenuItem.setLabel("Negative"); // Process Menu

		menu4.add(edgeMenuItem);
		edgeMenuItem.setLabel("Edge Detect");

		menu4.add(contrastMenuItem);
		contrastMenuItem.setLabel("Contrast Stretch");

		mainMenuBar.add(menu4);

		menu3.setLabel("Help");
		menu3.add(aboutMenuItem);
		aboutMenuItem.setLabel("About...");
		mainMenuBar.add(menu3);
		// $$ mainMenuBar.move(0,312);
		setMenuBar(mainMenuBar);
		// }}

		// {{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		openMenuItem.addActionListener(lSymAction);
		saveMenuItem.addActionListener(lSymAction); // Today
		exitMenuItem.addActionListener(lSymAction);
		aboutMenuItem.addActionListener(lSymAction);

		thresholdMenuItem.addActionListener(lSymAction); // Phase2
		negativeMenuItem.addActionListener(lSymAction);
		edgeMenuItem.addActionListener(lSymAction);
		contrastMenuItem.addActionListener(lSymAction);
		undoMenuItem.addActionListener(lSymAction);

		// }}

		// create frame to display image in
		// frame_image_display = new ImageFrame();
		// frame_image_display.setVisible(false);
	}

	public ImageApplication(String title) {
		this();
		setTitle(title);
	}

	/**
	 * Shows or hides the component depending on the boolean flag b.
	 * 
	 * @param b
	 *            if true, show the component; otherwise, hide the component.
	 * @see java.awt.Component#isVisible
	 */
	public void setVisible(boolean b) {
		if (b) {
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	// MAIN FUNCTION

	static public void main(String args[]) {
		try {
			// Create a new instance of our application's frame, and make it
			// visible.
			(new ImageApplication()).setVisible(true);
		} catch (Throwable t) {
			System.err.println(t);
			t.printStackTrace();
			// Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

	public void addNotify() {
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++) {
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

	// Used for addNotify check.
	boolean fComponentsAdjusted = false;

	// {{DECLARE_CONTROLS
	java.awt.FileDialog openFileDialog1 = new java.awt.FileDialog(this);
	java.awt.FileDialog saveFileDialog1 = new java.awt.FileDialog(this); // Today

	java.awt.Label label_title = new java.awt.Label();
	// }}

	// {{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu menu1 = new java.awt.Menu();

	// My changes

	java.awt.Menu menu2 = new java.awt.Menu();
	java.awt.Menu menu4 = new java.awt.Menu();

	java.awt.MenuItem undoMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem thresholdMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem negativeMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem edgeMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem contrastMenuItem = new java.awt.MenuItem();

	java.awt.MenuItem openMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem saveMenuItem = new java.awt.MenuItem(); // Today
	java.awt.MenuItem separatorMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
	java.awt.Menu menu3 = new java.awt.Menu();
	java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
	// java.awt.MenuItem edgeMenuItem = new java.awt.MenuItem(); //Today
	// }}

	class SymWindow extends java.awt.event.WindowAdapter {
		public void windowClosing(java.awt.event.WindowEvent event) {
			Object object = event.getSource();
			if (object == ImageApplication.this)
				ImageApplication_WindowClosing(event);
		}
	}

	void ImageApplication_WindowClosing(java.awt.event.WindowEvent event) {
		// to do: code goes here.

		ImageApplication_WindowClosing_Interaction1(event);
	}

	void ImageApplication_WindowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
			// QuitDialog Create and show as modal
			(new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	class SymAction implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent event) {
			Object object = event.getSource();
			if (object == openMenuItem)
				openMenuItem_ActionPerformed(event);
			else if (object == saveMenuItem) // Today
				saveMenuItem_ActionPerformed(event); // Today
			else if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == exitMenuItem)
				exitMenuItem_ActionPerformed(event);

			else if (object == thresholdMenuItem) // Phase2
				thresholdMenuItem_ActionPerformed(event);
			else if (object == negativeMenuItem)
				negativeMenuItem_ActionPerformed(event);
			else if (object == edgeMenuItem)
				edgeMenuItem_ActionPerformed(event);
			else if (object == contrastMenuItem)
				contrastMenuItem_ActionPerformed(event);
			else if (object == undoMenuItem)
				undoMenuItem_ActionPerformed(event);

		}

	}

	void openMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		openMenuItem_ActionPerformed_Interaction1(event);
	}

	// Method to open Image, either JPEG or GIF
	// loads image into img class variable and
	// calls method to display the image in a
	// new frame, called frame_image_display.

	// After you click "Open" in file menu. Following code executes:

	void openMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// OpenFileDialog Create and show as modal
			int defMode = openFileDialog1.getMode();
			String defTitle = openFileDialog1.getTitle();
			String defDirectory = openFileDialog1.getDirectory();
			String defFile = "*.jpg;*.gif";

			openFileDialog1 = new java.awt.FileDialog(this, defTitle, defMode);
			openFileDialog1.setDirectory(defDirectory);
			openFileDialog1.setFile(defFile);
			openFileDialog1.setVisible(true);

			int width, height;

			// Print out to console the name of file selected
			String Filename1 = (openFileDialog1.getDirectory()).concat(openFileDialog1.getFile());
			System.out.println("Opening: " + Filename1);

			// Open up image...INSTEAD use Media Tracker
			// to make sure that image really does load
			img = (java.awt.Toolkit.getDefaultToolkit()).getImage(Filename1);
			MediaTracker tracker = new MediaTracker(this);
			tracker.addImage(img, 0);
			try {
				tracker.waitForID(0); // wait until image loaded
			} catch (InterruptedException e) {
				System.out.println("Can't load image " + Filename1);
				return;
			}

			// YOU code, set image for frame_image_display
			// Create image_data object in which you **** TO DO ***** YOU MUST
			// DO ******
			// store the data you wish to actually
			// manipulate

			ImageIcon iconimg = new ImageIcon(img);
			width = iconimg.getIconWidth();
			height = iconimg.getIconHeight();

			img_data = new ImageData(img, "JPEG", height, width);

			// img_data.brighten(70);

			Image img1 = img_data.createImage();

			img = img1;

			// String file_name ="C://Users//aaqui//Desktop//OutputImage.jpg";

			// img_data.saveToFile(file_name,img1);

			frame_image_display.setImage(img);
			frame_image_display.setVisible(true);

			// Enable all of your GUI components for image operations

		} catch (Exception e) {
		}
	}

	// Phase 2

	// Negative ()

	void negativeMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		negativeMenuItem_ActionPerformed_Interaction1(event);
	}

	void negativeMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {

		try {
			// negDialog Create and show as modal
			// (new negDialog(this, true)).setVisible(true);
			contrastActive = 1;
			// Assigning current image to backup image
			backupImage = img;
			img_data.negative();
			Image img1 = img_data.createImage(); // Creating the new image with
			// the modified img_data
			// object
			img = img1;
			frame_image_display.setImage(img);
			frame_image_display.setVisible(true);
			undoMenuItem.setEnabled(true);

		} catch (Exception e) {
		}

	}

	// Threshold ()

	void thresholdMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		thresholdMenuItem_ActionPerformed_Interaction1(event);
	}

	void thresholdMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {

		String threshold;
		try {
			// treshDialog Create and show as modal
			// (new treshDialog(this, true)).setVisible(true);
			contrastActive = 1;
			backupImage = img;
			System.out.println("Applying Threshold function");
			threshold = JOptionPane.showInputDialog(this, "Enter Value", "Threshold Filter", JOptionPane.PLAIN_MESSAGE);
			System.out.println(threshold);

			img_data.threshold(Integer.parseInt(threshold));
			Image img1 = img_data.createImage();
			img = img1;

			frame_image_display.setImage(img);
			frame_image_display.setVisible(true);
			undoMenuItem.setEnabled(true);
		} catch (Exception e) {
		}

	}

	// Contrast Stretch

	void contrastMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		contrastMenuItem_ActionPerformed_Interaction1(event);
	}

	void contrastMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {

		String contrast;
		try {

			// Assigning Current image to backup image
			backupImage = img; // Inputs the value to be used for contrast
			System.out.println("Applyiing Contrast Function");
			contrast = JOptionPane.showInputDialog(this,
					"Enter a Value (0 to 1).\nDefault Contrast Value: " + contrastActive, "Contrast",
					JOptionPane.PLAIN_MESSAGE);
			System.out.println(contrast);

			img_data.contrast(Double.parseDouble((contrast)));
			Image img1 = img_data.createImage();
			img = img1;
			frame_image_display.setImage(img);
			frame_image_display.setVisible(true);
			contrastActive = Double.parseDouble((contrast));
			undoMenuItem.setEnabled(true);
		} catch (Exception e) {
		}

	}

	// Edge Detection

	void edgeMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		edgeMenuItem_ActionPerformed_Interaction1(event);
	}

	void edgeMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {

		try {

			backupImage = img; // Saving the current image in backupImage
			// object.

			img_data.edgeDetection();
			Image img1 = img_data.createImage();
			img = img1; // After the edge detection is performed, nnew image
			// object is created.

			frame_image_display.setImage(img);
			frame_image_display.setVisible(true);
			undoMenuItem.setEnabled(true);
		} catch (Exception e) {
		}

	}

	void undoMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		undoMenuItem_ActionPerformed_Interaction1(event);
	}

	void undoMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {

		try {

			img = backupImage;
			backupImage = null;
			contrastActive = 1;

			img_data = new ImageData(img, "JPEG", img.getHeight(this), img.getWidth(this));
			frame_image_display.setImage(img);
			frame_image_display.setVisible(true);
			undoMenuItem.setEnabled(false);
		} catch (Exception e) {
		}

	}

	// Today

	void saveMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		saveMenuItem_ActionPerformed_Interaction1(event);
	}

	void saveMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) // Today
	{
		try {
			JFileChooser filechoose = new JFileChooser();
			filechoose.setDialogTitle("Save As");
			filechoose.setPreferredSize(new Dimension(800, 600));
			int option = filechoose.showSaveDialog(null);
			if (option == JFileChooser.APPROVE_OPTION) {
				// Image img1 = img_data.createImage();
				String filename = filechoose.getSelectedFile().getAbsolutePath();
				img_data.saveToFile(filename, img);

			}

		} catch (Exception e) {
		}
	}

	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		aboutMenuItem_ActionPerformed_Interaction1(event);
	}

	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// AboutDialog Create and show as modal
			(new AboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event) {
		// to do: code goes here.

		exitMenuItem_ActionPerformed_Interaction1(event);
	}

	void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// QuitDialog Create and show as modal
			(new QuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

}
